{"version":3,"sources":["enums/index.ts","components/Logo/index.tsx","components/AppHeader/index.tsx","layouts/MainLayout.tsx","apis/baseUrl.ts","apis/commonHeader.ts","constants/key.ts","apis/getPrefectures.ts","components/Checkbox/index.tsx","components/ListPrefectures/index.tsx","apis/getPopulation.ts","constants/colors.ts","components/Chart/index.tsx","components/Spinner/index.tsx","pages/Home/index.tsx","pages/Notfound/index.tsx","routers/index.tsx","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["HttpStatusCode","Logo","alt","src","AppHeader","props","className","to","title","MainLayout","children","baseUrl","headerConfig","headers","process","REACT_APP_API_KEY","getPrefectures","url","axios","get","response","status","OK","data","result","length","Error","Checkbox","onClick","evenHandler","type","value","checked","onChange","name","label","trim","ListPrefectures","prefectures","map","item","prefName","prefCode","prefectureCode","selectPrefecture","React","memo","getPopulationComposition","cityCode","Number","isInteger","params","CHART_LINE_COLORS","Chart","useState","compositionData","setCompositionData","chartOptions","useMemo","categories","year","toString","concat","series","i","element","y","z","rate","color","text","style","fontWeight","subtitle","slice","tooltip","shared","valueSuffix","pointFormat","lang","thousandsSep","xAxis","credits","yAxis","labels","formatter","Highcharts","numberFormat","split","useEffect","then","catch","error","Fragment","highcharts","options","Spinner","HomePage","loading","setLoading","setPrefectures","setPrefectureCode","finally","marginTop","code","NotFoundPage","AppRoutes","exact","path","component","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","href","origin","addEventListener","fetch","contentType","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.f3da93d4.chunk.js","sourcesContent":["export enum HttpStatusCode {\n  OK = 200,\n  CREATED = 201,\n  BAD_REQUEST = 400,\n  UNAUTHORIZED = 401,\n  FORBIDDEN = 403,\n  NOTFOUND = 404,\n  INTERNAL_SERVER_ERROR = 500,\n  BAD_GATEWAY = 502,\n}\n","const Logo = () => <img alt=\"Logo\" src=\"/static/logo.svg\" />;\n\nexport default Logo;\n","import Logo from 'components/Logo';\nimport { Link as RouterLink } from 'react-router-dom';\n\ninterface AppHeaderProps {\n  title: string;\n  backgroundColor?: string;\n  rootWight?: number | string;\n  rootHeight?: number | string;\n}\n\nconst AppHeader = (props: AppHeaderProps) => {\n  return (\n    <div className=\"container-fluid app-header\">\n      <div className=\"row\">\n        <div className=\"col-xs-2\">\n          <RouterLink to=\"/abc\">\n            <Logo />\n          </RouterLink>\n        </div>\n        <div className=\"col-xs-8 app-header__title\">\n          <h3>{props.title}</h3>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default AppHeader;\n","import AppHeader from 'components/AppHeader';\nimport { Fragment } from 'react';\n\ntype MainLayoutProps = {\n  children?: JSX.Element;\n};\n\nconst MainLayout = (props: MainLayoutProps) => {\n  return (\n    <Fragment>\n      <header>\n        <AppHeader title=\"人口チャート\" />\n      </header>\n      {props?.children}\n    </Fragment>\n  );\n};\n\nexport { MainLayout };\n","export const baseUrl = 'https://opendata.resas-portal.go.jp/api/v1';\n","import { AxiosRequestConfig } from 'axios';\nimport { API_KEY } from 'constants/key';\n\nexport const headerConfig: AxiosRequestConfig = {\n  headers: {\n    'X-API-KEY': API_KEY,\n  },\n};\n","export const API_KEY = process.env.REACT_APP_API_KEY;\n","import axios from 'axios';\nimport { baseUrl } from './baseUrl';\nimport { headerConfig } from './commonHeader';\nimport { PrefecturesResponse, Prefecture } from '@types';\nimport { HttpStatusCode } from 'enums';\n\nexport const getPrefectures = async (): Promise<Prefecture[]> => {\n  const url = `${baseUrl}/prefectures`;\n  const response = await axios.get<PrefecturesResponse>(url, headerConfig);\n  if (\n    response.status === HttpStatusCode.OK &&\n    response.data?.result?.length > 0\n  )\n    return response.data.result;\n  throw new Error('getPrefectures() ERROR');\n};\n","// import React, { useState } from 'react';\n\nimport { ReactEventHandler } from 'react';\n\ntype CheckboxProps = {\n  label?: string;\n  value?: string | number;\n  checked?: boolean;\n  name?: string;\n  evenHandler?:\n    | ReactEventHandler<HTMLInputElement | HTMLDivElement>\n    | undefined;\n};\n\nconst Checkbox = (props: CheckboxProps) => {\n  return (\n    <div className=\"checkbox-item\" onClick={props.evenHandler}>\n      <input\n        type=\"radio\"\n        value={props?.value}\n        checked={props?.checked ? true : false}\n        onChange={props.evenHandler}\n        name={props.name}\n      />\n      {props?.label?.trim() && (\n        <label\n          className={props?.checked ? 'checkbox-label-bold ' : 'checkbox-label'}\n        >\n          {props.label}\n        </label>\n      )}\n    </div>\n  );\n};\n\nexport default Checkbox;\n","import Checkbox from 'components/Checkbox';\nimport { Prefecture } from '@types';\nimport React from 'react';\n\ninterface ListPrefecturesProps {\n  prefectures: Prefecture[];\n  prefectureCode?: number;\n  selectPrefecture?: (code: number) => void;\n}\n\nconst ListPrefectures = (props: ListPrefecturesProps) => {\n  return (\n    <div className=\"col-xs-12 col-md-5\">\n      <div className=\"row prefectures-container\">\n        <h3 className=\"prefectures-container__title\">\n          都道府県 ({props.prefectures.length})\n        </h3>\n      </div>\n      <div className=\"row prefectures-options\">\n        {props.prefectures.length > 0 &&\n          props.prefectures.map((item) => (\n            <div\n              className=\"col-xs-4 prefectures-options__item\"\n              key={item.prefCode}\n            >\n              <Checkbox\n                label={item.prefName}\n                value={item.prefCode}\n                checked={props.prefectureCode === item.prefCode}\n                name=\"prefectureCode\"\n                evenHandler={() => {\n                  if (props.selectPrefecture) {\n                    props.selectPrefecture(item.prefCode);\n                  }\n                }}\n              />\n            </div>\n          ))}\n      </div>\n    </div>\n  );\n};\n\nexport default React.memo(ListPrefectures);\n","import axios from 'axios';\nimport { baseUrl } from './baseUrl';\nimport { headerConfig } from './commonHeader';\nimport { HttpStatusCode } from 'enums';\nimport { PopulationCompositionResponse } from '@types';\n\nexport const getPopulationComposition = async (\n  prefCode: number,\n  cityCode: number | '-',\n) => {\n  if (!Number.isInteger(prefCode)) {\n    throw new Error('prefCode must be an integer number.');\n  }\n  if (cityCode !== '-' && !Number.isInteger(cityCode)) {\n    throw new Error('cityCode must be an integer number or `-` character.');\n  }\n  const url = `${baseUrl}/population/composition/perYear`;\n  const response = await axios.get<PopulationCompositionResponse>(url, {\n    params: { prefCode, cityCode },\n    ...headerConfig,\n  });\n  if (response?.status === HttpStatusCode.OK) return response?.data?.result;\n};\n","export const CHART_LINE_COLORS = ['#ff7368', '#64a4ff', '#76d8a5', '#daf357'];\n","import { getPopulationComposition } from 'apis/getPopulation';\nimport HighchartsReact from 'highcharts-react-official';\nimport Highcharts from 'highcharts';\nimport React, { useEffect, useMemo, useState } from 'react';\nimport { PopulationComposition } from '@types';\nimport { CHART_LINE_COLORS } from 'constants/colors';\n\ninterface ChartProps {\n  prefectureCode: number;\n  title: string;\n}\n\nconst Chart = (props: ChartProps) => {\n  const [compositionData, setCompositionData] = useState<\n    { boundaryYear?: number; data: PopulationComposition[] } | undefined\n  >();\n\n  const chartOptions = useMemo(() => {\n    if (compositionData?.data?.length) {\n      const categories = compositionData.data[0].data.map((item) =>\n        item.year.toString().concat('年'),\n      );\n      const series: Highcharts.SeriesOptionsType[] = compositionData.data.map(\n        (item, i) => {\n          return {\n            type: 'line',\n            name: item.label,\n            data: item.data.map((element) => {\n              return {\n                y: element.value,\n                z: element.rate ? `(${element.rate}%)` : ('' as any),\n              };\n            }),\n            color: CHART_LINE_COLORS[i],\n          };\n        },\n      );\n      const options: Highcharts.Options = {\n        title: {\n          text: props.title,\n          style: {\n            fontWeight: 'bold',\n          },\n        },\n        subtitle: {\n          text: `(${compositionData.data[0].data[0].year}年 - ${\n            compositionData.data[0].data.slice(-1)[0].year\n          }年)`,\n        },\n        tooltip: {\n          shared: true,\n          valueSuffix: ' 人',\n          pointFormat:\n            '<span style=\"color:{series.color}\">{series.name}</span>: <b>{point.y}</b> {point.z}<br/>',\n        },\n        lang: {\n          thousandsSep: ',',\n        },\n        series: series,\n        xAxis: {\n          categories: categories,\n          title: {\n            text: '年度',\n            style: {\n              fontWeight: 'bold',\n            },\n          },\n        },\n        credits: {\n          text: '',\n        },\n        yAxis: {\n          title: {\n            text: '人口数',\n            style: {\n              fontWeight: 'bold',\n            },\n          },\n          labels: {\n            formatter: (label) => {\n              return Highcharts.numberFormat(\n                Number(label.value.toString().split('-')[0]),\n                0,\n                '',\n                ',',\n              ).concat(' 人');\n            },\n          },\n        },\n      };\n      return options;\n    }\n  }, [compositionData]);\n\n  useEffect(() => {\n    getPopulationComposition(props.prefectureCode, '-')\n      .then((data) => setCompositionData(data))\n      .catch((error) => {\n        throw error;\n      });\n  }, [props.prefectureCode]);\n\n  return (\n    <React.Fragment>\n      {chartOptions && (\n        <HighchartsReact highcharts={Highcharts} options={chartOptions} />\n      )}\n    </React.Fragment>\n  );\n};\n\nexport default React.memo(Chart);\n","import React from 'react';\n\ninterface SpinnerProps {\n  style?: React.CSSProperties | undefined;\n}\n\nconst Spinner = (props: SpinnerProps) => {\n  return <div className=\"spinner\" style={props.style}></div>;\n};\n\nexport default React.memo(Spinner);\n","import { MainLayout } from 'layouts/MainLayout';\nimport { getPrefectures } from 'apis/getPrefectures';\nimport { useEffect, useState } from 'react';\nimport { Prefecture } from '@types';\nimport ListPrefectures from 'components/ListPrefectures';\nimport Chart from 'components/Chart';\nimport Spinner from 'components/Spinner';\n\nconst HomePage = () => {\n  const [loading, setLoading] = useState(true);\n  const [prefectures, setPrefectures] = useState<Prefecture[]>([]);\n  const [prefectureCode, setPrefectureCode] = useState(1);\n\n  const selectPrefecture = (code: number) => {\n    if (code !== prefectureCode) setPrefectureCode(code);\n  };\n\n  useEffect(() => {\n    getPrefectures()\n      .then((data) => {\n        setPrefectures(data);\n      })\n      .catch((error) => {\n        throw error;\n      })\n      .finally(() => {\n        setLoading(false);\n      });\n  }, []);\n  return (\n    <MainLayout>\n      <div className=\"container\">\n        <div className=\"row\" style={{ marginTop: 100 }}>\n          {loading ? (\n            <Spinner />\n          ) : (\n            <ListPrefectures\n              prefectures={prefectures}\n              prefectureCode={prefectureCode}\n              selectPrefecture={selectPrefecture}\n            />\n          )}\n          <div className=\"col-xs-12 col-md-7\">\n            <Chart prefectureCode={prefectureCode} title=\"人口構造図\" />\n          </div>\n        </div>\n      </div>\n    </MainLayout>\n  );\n};\nexport default HomePage;\n","import { MainLayout } from 'layouts/MainLayout';\n\nconst NotFoundPage = () => {\n  return (\n    <MainLayout>\n      <h1 className=\"not-found\">404 - NOT FOUND</h1>\n    </MainLayout>\n  );\n};\nexport default NotFoundPage;\n","import React from 'react';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport HomePage from 'pages/Home';\nimport NotFoundPage from 'pages/Notfound';\n\nconst AppRoutes = () => {\n  return (\n    <BrowserRouter>\n      <Switch>\n        <Route exact={true} path=\"/\" component={HomePage} />\n        <Route exact={true} path=\"*\" component={NotFoundPage} />\n      </Switch>\n    </BrowserRouter>\n  );\n};\nexport default AppRoutes;\n","import React from 'react';\nimport './App.css';\nimport AppRoutes from './routers';\n\nfunction App() {\n  return <AppRoutes />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './scss/_root.scss';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}